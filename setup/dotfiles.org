#+title: Managing dotfiles
#+logseq_title: dotfiles
#+filetags: :dotfiles:

* awesome-dotfiles https://github.com/webpro/awesome-dotfiles
:PROPERTIES:
:ID:       wsmdtflssgthbcmwbprwsmdtfls
:END:
TODO check occasionally?

* What I tried
:PROPERTIES:
:ID:       whttrd
:END:
** CNCL gnu stow?
:PROPERTIES:
:ID:       gnstw
:END:
apparently a parallel hierarchy with symlinks?
would be nice to specify, which directories should be created and which should just be symlinked. Otherwise stuff might end up in symlinked folders

- very clumsy to use, hard to replace existing entries, no apparent way of deleting them (unlike git)

** CNCL fresh to build gh config? https://github.com/freshshell/fresh
:PROPERTIES:
:ID:       frshtbldghcnfgsgthbcmfrshshllfrsh
:END:
you can write a configuration, and it will symlinka all automatically
apparently can source from gh repos, so you could just 'follow' someones' dotfiles (not very portable though)
** CNCL homesick? https://github.com/technicalpickles/homesick
:PROPERTIES:
:ID:       hmscksgthbcmtchnclpcklshmsck
:END:
looks like a parallel hierarchy of dotfiles mimicing /home? could be convenient to manage with symlinks...
wonder if .homesick directory is configurable

ok, so if i create home dir and add relative symlinks to it, it sort of works fine.
add a script to check symlink integrity?
still unclear what should i do with patch files. maybe have a manual dir with symlinks as well?
homesick track? although it's a bit weird if configuration comes from different files, but i guess it's quite rare

ugh.. homedir_subdir is a bit weird.. could make it support relative symlinks within repo
ugh.. homesick seems to rewrite relative symlinks to absolute... wtf???

** mackup? https://github.com/lra/mackup
:PROPERTIES:
:ID:       mckpsgthbcmlrmckp
:END:
apparently just backs up and symlinks configs for some applications
hmm, so it supports doublecmd. wonder how they handle their configs..
nope, just copies. nothing interesting
- [2021-05-04] doesn't support mc
** CNCL vcsh http://blog.tfnico.com/2014/03/managing-dot-files-with-vcsh-and-myrepos.html
:PROPERTIES:
:ID:       vcshblgtfnccmmngngdtflswthvcshndmyrpshtml
:END:
weird stuff, messes with git and uses mr tool to manipulate on multiple repos at the same time
take another look at it?
mm -- ok, so apparently it's just like single repo view but routing to different subrepos
e.g. vcsh init vim; vcsh vim commit .vimrc
** dotbot?
:PROPERTIES:
:ID:       dtbt
:END:
yaml configs.. ugh
** dotdrop https://github.com/deadc0de6/dotdrop
:PROPERTIES:
:ID:       dtdrpsgthbcmddcddtdrp
:END:
allows templating thanks to jinja2
erm.. it copies, not symlinks apparently
** CNCL dotgit https://github.com/kobus-v-schoor/dotgit
:PROPERTIES:
:ID:       dtgtsgthbcmkbsvschrdtgt
:END:
hmm encryption! 
aims to keep all in single repository
too comlicated.
** https://github.com/evanpurkhiser/dots has post installation script
:PROPERTIES:
:ID:       sgthbcmvnprkhsrdtshspstnstlltnscrpt
:END:
was updated 2 years ago



* DONE using git repository with symlinks + external ~ working directory :git:
:PROPERTIES:
:CREATED:  [2018-04-02]
:ID:       snggtrpstrywthsymlnksxtrnlwrkngdrctry
:END:

/repos/configuration
cgit command

- cons: not dropbox friendly because of symlinks
  maybe sync via syncthing?

  - TODO how to make todos here?

- keep only symlinks to files unless it absolutely makes sense to symlink directory
  why: if it's a directory locally and a symlink in the repo (e.g. with autostart dir), it won't merge easily

- symlink into from various repos

  - public dotfiles
  - private dotfiles
  - machine specific dotfiles
  - files which aren't under git (configs-nogit)
    config-nogit: use tree command to store contents
    maybe git lfs would be better for that??
  - scripts
  - histories: bash, python, etc.
  - etc

** bootstrapping
:PROPERTIES:
:ID:       btstrppng
:END:
- alias cgit='git --git-dir=/repos/configuration/.git --work-tree=/home/karlicos'
- cgit ireset -- to restore working dir state
- run check.sh from ~ and restore all the missing symlinks
  resolve filtype configs (file vs symlinks)
** workflow
:PROPERTIES:
:ID:       wrkflw
:END:
cgit status to see if anything has changed
cgit add / cgit commit / cgit push
** TODO try git lfs?
:PROPERTIES:
:ID:       trygtlfs
:END:

* TODO something about files which can't be kept in git                 :git:
:PROPERTIES:
:ID:       smthngbtflswhchcntbkptngt
:END:
** for configs which are patched via script, symlink what patches it  :setup:
:PROPERTIES:
:CREATED:  [2018-05-12]
:ID:       frcnfgswhchrptchdvscrptsymlnkwhtptchst
:END:

~ln -s "$(realpath $BASH_SOURCE)" "$CDIR"~


* Tooling
:PROPERTIES:
:ID:       tlng
:END:
** jq for patching JSON                                                :json:
:PROPERTIES:
:ID:       jqfrptchngjsn
:END:
https://jqplay.org/ is also quite convenient


* DONE [2018-06-20] configs which are not symlinking -- have a script which checks them against reference every few hours and complains if config doesn't match the reference?
:PROPERTIES:
:ID:       cnfgswhchrntsymlnknghvscrmplnsfcnfgdsntmtchthrfrnc
:END:
I guess it would belong to configuration repository


* related                                                             :infra:
:PROPERTIES:
:ID:       rltd
:END:
* [#D] [2019-06-01] motivation for core.worktree         :git:setup:dotfiles:
:PROPERTIES:
:ID:       mtvtnfrcrwrktr
:END:
can't use bare repository since they don't have index
we don't want to use working directory since it's just confusing
solution is git config core.worktree $HOME
* [#C] [2020-07-12] [[https://news.opensuse.org/2020/03/27/Manage-dotfiles-with-Git/][Manage your dotfiles with Git - openSUSE News]] :git:
:PROPERTIES:
:ID:       snwspnssrgmngdtflswthgtmngyrdtflswthgtpnssnws
:END:
* [#B] [2020-05-26] [[https://joeyates.info/2018/12/16/dotfiles/][Dotfiles - Joe Yates' Blog]] :git:dotfiles:
:PROPERTIES:
:ID:       sjytsnfdtflsdtflsjytsblg
:END:
very similal to how I manage it -- the git based approach is super simple, portable and predictable
