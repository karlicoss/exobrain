#+title: 
Bash & shell programming

* shell programming                                                    :bash:
:PROPERTIES:
:ID:       shllprgrmmng
:END:
** [2017-12-25] boolean return value
:PROPERTIES:
:ID:       blnrtrnvl
:END:
: function whatever {
:  if (x)
:   then
:       true
:   else
:       false
:   fi
: }
: if whatever
: then ...
** [2017-12-26] multi-line string varible
:PROPERTIES:
:ID:       mltlnstrngvrbl
:END:
: MULTILINE=$(cat <<-END
: here
: goes
: multi
: line
: END
: )

** [2017-12-30] iterate over array
:PROPERTIES:
:ID:       trtvrrry
:END:
: EXTRA_STOWS=("home-arbtt" "home-emacs" "home-anacron")
: for s in "${EXTRA_STOWS[@]}"

** assert variable is defined {double square brackets -v} operator    :habit:
:PROPERTIES:
:ID:       a634e825-dba8-4161-ae44-46f42afa6a6b
:END:

** [2018-04-26] get current script directory
:PROPERTIES:
:ID:       gtcrrntscrptdrctry
:END:
: DIR=$(dirname "$(readlink -f "$0")")

(might not work on mac)

** avoid passing flags in shebang (e.g. ~#!/bin/bash -eu~)            :habit:
:PROPERTIES:
:CREATED:  [2018-06-21]
:ID:       e5d6dbfc-d16e-4232-8f3c-39b3c2e4b28f
:END:
e.g. if you specify other flags in terminal, they would override everything
instead, better to use ~if [[ $0 == "$BASH_SOURCE" ]]; then set -eux; fi~

* interactive tricks & tips                                           :shell:
:PROPERTIES:
:ID:       ntrctvtrckstps
:END:
priorities roughly indicate how useful I find each command
** [#A] [2015-07-23] ~diff <(ls dir1) <(ls dir2)~
:PROPERTIES:
:ID:       dfflsdrlsdr
:END:
** [#B] use sigquit {Ctrl-\} to kill processes that are really stuck (when Ctrl-C isn't working) :habit:
:PROPERTIES:
:CREATED:  [2018-03-05]
:ID:       a7b98370-f7c2-420e-9934-4e5267e50e62
:END:
** [#B] exec command on each file ~find . -exec some command {} \;~   :drill:
:PROPERTIES:
:CREATED:  [2019-06-19]
:ID:       ac5e2198-a0b5-4480-b2fc-32b2b90796fc
:END:
** TODO exec command in parallel ~find /path -iname '*.pdf' -print0 | xargs -0 -n1 -i -P8 bash -c "echo 'Processing {}' && command '{}'"~ :drill:
:PROPERTIES:
:CREATED:  [2019-06-20]
:ID:       49b87f35-d5be-424d-9695-42b15c7641fe
:END:

** [#C] [2018-05-08] ~ps aufx~ to list all processes
:PROPERTIES:
:ID:       psfxtlstllprcsss
:END:

** [#C] tree -pufi for file tree with permissions                     :habit:
:PROPERTIES:
:CREATED:  [2018-09-18]
:ID:       8e3d71f6-ccab-43aa-a05a-3c53221779f3
:END:
** [#C] pretty print json ~cat file.json | python -mjson.tool~         :json:
:PROPERTIES:
:ID:       prttyprntjsnctfljsnpythnmjsntl
:END:
** [#D] detect if library is installed ~ldconfig -p | grep libjpeg~ or ~gcc -ljpeg~
:PROPERTIES:
:ID:       dtctflbrrysnstlldldcnfgpgrplbjpgrgccljpg
:END:

** [#D] [2015-07-23] merging pdfs
:PROPERTIES:
:ID:       mrgngpdfs
:END:
: pdftk out.pdf j1-process.pdf j1-process-2.pdf j1-process-3.pdf cat output merged.pdf
: pdftk full-pdf.pdf cat 1 1 1 2  3 4 12-15 output outfile_p12-15.pdf


** [#D] {ln -i} for interactive symlink (prompts for removal)         :habit:
:PROPERTIES:
:CREATED:  [2018-03-01]
:ID:       67a7fb46-4a6e-491b-ada9-6e6dfb54ac3f
:END:

* TODO [#C] use whiptail for ncurses dialogs                      :tui:habit:
:PROPERTIES:
:ID:       a4e1347c-793d-4650-a883-35e9d724f523
:END:
* [2021-01-06] [[https://unix.stackexchange.com/questions/85391/where-is-the-bash-feature-to-open-a-command-in-editor-documented][Where is the bash feature to open a command in $EDITOR documented? - Unix & Linux Stack Exchange]] :bash:habit:
:PROPERTIES:
:ID:       cbc39de1-5889-4f06-b511-eedb8d3b7c7c
:END:
: edit-and-execute-command (C-xC-e)
