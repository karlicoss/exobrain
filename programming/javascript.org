#+title: Javascript
#+filetags: :js:

* related                                                            :nodejs:
:PROPERTIES:
:ID:       rltd
:END:

* [#A] [2019-09-29] Practical Ways to Write Better JavaScript - Stack Overflow Blog
:PROPERTIES:
:ID:       prctclwystwrtbttrjvscrptstckvrflwblg
:END:
https://stackoverflow.blog/2019/09/12/practical-ways-to-write-better-javascript/

* TODO [#B] [2020-03-13] Wes Bos on Twitter: "üî• Optional Chaining (deep property checking) is now in Chrome, Firefox and babel-preset-env 7.8.0. This is a huge improvement in checking if nested properties exist! https://t.co/ypmHeQ8rGw" / Twitter
:PROPERTIES:
:ID:       wsbsntwttrptnlchnngdpprprprprtsxststcypmhqrgwtwttr
:END:
https://twitter.com/wesbos/status/1238468738946646017
: Optional Chaining (deep property checking) is now in Chrome, Firefox and babel-preset-env 7.8.0.
: This is a huge improvement in checking if nested properties exist!
* [#B] [2019-11-10] fuck, ~replace~ only replaces first occurence if string is used??
:PROPERTIES:
:ID:       fckrplcnlyrplcsfrstccrncfstrngssd
:END:
* TODO [#C] use let instead of var                                    :drill:
:PROPERTIES:
:CREATED:  [2019-07-07]
:ID:       7a6a66bd-1d36-42a9-b170-235ded0b0381
:END:
SCHEDULED: [2022-03-25]

* [#C] looping over collection { for x of arr }
:PROPERTIES:
:CREATED:  [2019-02-03]
:ID:       182c6da9-7a1f-4f0d-84eb-72cea4bf05a1
:END:
* [#C] date parsing
:PROPERTIES:
:ID:       dtprsng
:END:
http://www.datejs.com/ looks ok, supports fuzzy stuff like 'next week', 'previous month', etc
* [#D] [2019-07-14] Enabling Async/Await and Generator Functions in Babel and Node JS
:PROPERTIES:
:ID:       nblngsyncwtndgnrtrfnctnsnbblndndjs
:END:
https://medium.com/@binyamin/enabling-async-await-and-generator-functions-in-babel-node-and-express-71e941b183e2
: Uncaught ReferenceError: regeneratorRuntime is not defined
: I found this answer to my troubles and it worked when I implemented it. Just change .babelrc to the following:
: {
:   "presets": [
:     [
:       "@babel/preset-env",
:       {
:         "targets": {
:           "node": "10"
:         }
:       }
:     ],
:     "@babel/preset-react"
:   ]
: }
* [#D] [2019-07-14] javascript - Is it safe to use async/await now? - Stack Overflow
:PROPERTIES:
:ID:       jvscrptstsftssyncwtnwstckvrflw
:END:
https://stackoverflow.com/questions/42183155/is-it-safe-to-use-async-await-now
: So depending on what you think is acceptable it is either safe or not safe. Note the following:
:     This question was originally asked on 2017, and we have come a long way so async/await is much more safe to use now.
:     By 2019, most mobile devices already support async/await.
:     Node 8 is released on May 2017 so it should be safe to use async/await on Node.js unless your Node.js servers are very outdated.
* TODO [#B] [2020-11-10] [[https://stackoverflow.com/questions/42773714/is-async-await-truly-non-blocking-in-the-browser][javascript - Is async await truly non-blocking in the browser? - Stack Overflow]]
:PROPERTIES:
:ID:       sstckvrflwcmqstnsssyncwttnnblckngnthbrwsrstckvrflw
:END:
: Points for the worker without an external file. That's one cool trick
* [#C] https://github.com/feltcoop/why-svelte
:PROPERTIES:
:CREATED:  [2020-03-10]
:ID:       sgthbcmfltcpwhysvlt
:END:

* [#C] [2020-03-10] Why Svelte is our choice for a large web project | Hacker News
:PROPERTIES:
:ID:       whysvltsrchcfrlrgwbprjcthckrnws
:END:
https://news.ycombinator.com/item?id=22534639

* [#C] [2019-06-30] Implementing infinite scrolling : reactjs
:PROPERTIES:
:ID:       mplmntngnfntscrllngrctjs
:END:
https://www.reddit.com/r/reactjs/comments/7z87o9/implementing_infinite_scrolling/
: ssuming its only 100 items, i'd just display them all from the start, and let scroll do what scroll does. if you're trying to simplify a real world example where you might have 1000's of initially returned items, then something similar to /u/pqnst but instead of just slicing 0,(page * 20), you'd have to slice(20 * (page - 1), 20 * page) and account for the height of the sliced out elements in the scrollTop of the scrolling container
* TODO [#C] [2019-08-01] google chrome extension - Injecting iframe into page with restrictive Content Security Policy - Stack Overflow
:PROPERTIES:
:ID:       gglchrmxtnsnnjctngfrmntpgtvcntntscrtyplcystckvrflw
:END:
https://stackoverflow.com/questions/24641592/injecting-iframe-into-page-with-restrictive-content-security-policy

* [2020-05-02] [[https://medium.com/@invicticide/patching-an-npm-dependency-without-going-completely-insane-aa0b110a80c][Patching an NPM dependency without going completely insane]]
:PROPERTIES:
:ID:       smdmcmnvctcdptchngnnpmdpnmdpndncywthtgngcmpltlynsn
:END:
* TODO [#C] Tweet from Guy Bedford (@guybedford), at Dec 27, 19:23  :js:repl:
:PROPERTIES:
:CREATED:  [2019-12-27]
:ID:       twtfrmgybdfrdgybdfrdtdc
:END:
: Periodic reminder that `await import('//dev.jspm.io/[pkg]')` allows you to import anything from npm in the browser instantly. I often use this in the console to test things out.

https://twitter.com/guybedford/status/1202022281633030145

* TODO [#C] [2019-08-18] stidges/jquery-searchable: Tiny, fast jQuery plugin to search through elements as you type. :search:
:PROPERTIES:
:ID:       stdgsjqrysrchbltnyfstjqryplgntsrchthrghlmntssytyp
:END:
https://github.com/stidges/jquery-searchable
: Tiny, fast jQuery plugin to search through elements as you type.
* TODO [#D] [2019-08-18] flexsearch - npm                            :search:
:PROPERTIES:
:ID:       flxsrchnpm
:END:
https://www.npmjs.com/package/flexsearch

* TODO [#D] codemirror search widget                                     :js:
:PROPERTIES:
:CREATED:  [2019-08-28]
:ID:       cdmrrrsrchwdgt
:END:
* [#C] [2020-01-30] Svelte 3: Rethinking reactivity
:PROPERTIES:
:ID:       svltrthnkngrctvty
:END:
https://svelte.dev/blog/svelte-3-rethinking-reactivity
: Svelte is a component framework ‚Äî like React or Vue ‚Äî but with an important difference. Traditional frameworks allow you to write declarative state-driven code, but there's a penalty: the browser must do extra work to convert those declarative structures into DOM operations, using techniques like
: that eat into your frame budget and tax the garbage collector.
: Instead, Svelte runs at build time, converting your components into highly efficient imperative code that surgically updates the DOM. As a result, you're able to write ambitious applications with excellent performance characteristics.
* [2020-07-18] [[https://stackoverflow.com/questions/282670/easiest-way-to-sort-dom-nodes][javascript - Easiest way to sort DOM nodes? - Stack Overflow]] :js:
:PROPERTIES:
:ID:       sstckvrflwcmqstnssstwytsrptsstwytsrtdmndsstckvrflw
:END:
: By using list.children instead of list.childNodes, you can avoid the check for text nodes.
* [#C] [2020-06-21] [[https://news.ycombinator.com/item?id=23578319][A little bit of plain JavaScript can do a lot | Hacker News]]
:PROPERTIES:
:ID:       snwsycmbntrcmtmdlttlbtfplnjvscrptcndlthckrnws
:END:
: A bit more minified/modern version of this that I'm using:
:     function $e(t='div',p={},c=[]){
:       let el=document.createElement(t);
:       Object.assign(el,p);
:       el.append(...c);
:       return el;
:     }
:     var $t=document.createTextNode.bind(document);
* TODO [#C] [2019-09-06] A small trick on using console.log to print data in JavaScript | Lobsters :js:
:PROPERTIES:
:ID:       smlltrcknsngcnsllgtprntdtnjvscrptlbstrs
:END:
https://lobste.rs/s/u2dyrr/small_trick_on_using_console_log_print
: console.log("User(%o)", user)
: console.table is also useful
:     faitswulff avatar faitswulff 3 hours ago | link |
: I‚Äôve started to use console.table for pretty much everything. It‚Äôs so nice.
* TODO [#C] [2020-06-05] [[https://merveilles.town/@materialfuture/104292286688572143][MaterialFuture: "Tried out DenoJS to play around with Vue and it w‚Ä¶" - Merveilles]] :js:
:PROPERTIES:
:ID:       smrvllstwnmtrlftrmtrlftrtdnjstplyrndwthvndtwmrvlls
:END:
: Tried out DenoJS to play around with Vue and it was very pleasant to use.
: I'm going to have to read more into it, but I think any personal JS projects will be using Deno simply due to the lack of dependencies and speed.
* [#C] [2020-04-02] [[https://news.ycombinator.com/item?id=22758218][How to manage HTML DOM with vanilla JavaScript only?]]
:PROPERTIES:
:ID:       snwsycmbntrcmtmdhwtmnghtmldmwthvnlljvscrptnly
:END:
https://htmldom.dev/
* [2021-01-03] IMO, long names like appendChild, getElementById, createTextNode, etc discourage use of vanilla js :plt:js:
:PROPERTIES:
:ID:       mlngnmslkppndchldgtlmntbydcrttxtndtcdscrgsfvnlljs
:END:
* [[https://nodejs.org/api/util.html#util_util_inspect_object_options][inspecting object]] :nodejs:debug:
:PROPERTIES:
:ID:       sndjsrgptlhtmltltlnspctbjctptnsnspctngbjct
:END:
: let util = require('util')
: console.log(util.inspect(resp, {showHidden: false, depth: 1}))
* [2020-04-08] antonmedv/codejar: An embeddable code editor for the browser üçØ
:PROPERTIES:
:ID:       ntnmdvcdjrnmbddblcddtrfrthbrwsr
:END:
https://github.com/antonmedv/codejar
: CodeJar honey_pot can be used via modules:
: <script type="module">
:   import {CodeJar} from 'https://medv.io/codejar/codejar.js'
: </script>
* [2019-08-28] [[https://reddit.com/r/javascript/comments/7bfwpl/flow_vs_typescript/dpif1rc/][Flow vs Typescript]] /r/javascript :flow:js:
:PROPERTIES:
:ID:       srddtcmrjvscrptcmmntsbfwppfrcflwvstypscrptrjvscrpt
:END:
:  Having used both (Flow for one very large project and TypeScript for a few less large projects) I am very much in the TypeScript camp now.
:  
:  Firstly, DefinitelyTyped has vastly more library defs available than flow-typed, which matters a whole lot more than you might realize. It's pretty rare that `npm install @types/name-of-package` comes up empty.
:  
:  Secondly, Flow feels slower and buggier; I use VS Code full-time and have found that TS reacts to code changes far more quickly and accurately than Flow (almost instantaneously across an entire project), and provides much more useful error messages (I lost count of the number of times I saw `merge_strict_job exception: Utils_js.Key_not_found("LeaderHeap")`, which I believe usually indicates a bug in Flow itself but is also completely useless and extremely difficult to debug). Of course I realize that TS and Code are both Microsoft products so it's not surprising that TS works better, but even in Atom with Nuclide I found that Flow was a bit slow to catch up to things, and still sometimes threw very cryptic errors.
:  
:  Finally, TS has a pretty solid built-in compiler which tracks the official spec, and natively supports features like `async`/`await`.
:  
:  To your original question, I'm currently working on a React-heavy project with TS and have found it to have excellent support. Flow works very well with React as well, which is to be expected since both come from Facebook. I think either would be a fine decision, but definitely feel TS has the edge in stability and speed.
* [2019-09-01] npm vs. yarn - which one and why? : javascript
:PROPERTIES:
:ID:       npmvsyrnwhchnndwhyjvscrpt
:END:
https://www.reddit.com/r/javascript/comments/ad6zoj/npm_vs_yarn_which_one_and_why/
: npm has greatly improved since the original days of yarn. With lock files and better dependency tree management, I find very few reasons to use yarn nowadays.
: I'd say use npm until you find a feature from yarn that requires you to switch. npm is included with every Node.js install.
* [2019-07-22] things that js has: destructing objects, named arguments https://simonsmith.io/destructuring-objects-as-function-parameters-in-es6
:PROPERTIES:
:ID:       thngsthtjshsdstrctngbjctsrctrngbjctssfnctnprmtrsns
:END:
* [#C] [2019-01-04] eslint is best apparently                            :js:
:PROPERTIES:
:ID:       slntsbstpprntly
:END:
* [#D] [2019-09-21] addyosmani/es6-tools: An aggregation of tooling for using ES6 today
:PROPERTIES:
:ID:       ddysmnstlsnggrgtnftlngfrsngstdy
:END:
https://github.com/addyosmani/es6-tools#readme
* [2018-12-13] javascript - Inserting large quantities in IndexedDB's objectstore blocks UI - Stack Overflow
:PROPERTIES:
:ID:       jvscrptnsrtnglrgqnttsnndxddbsbjctstrblcksstckvrflw
:END:
https://stackoverflow.com/questions/10471759/inserting-large-quantities-in-indexeddbs-objectstore-blocks-ui
* [2019-07-07] [[https://reddit.com/r/vuejs/comments/8myjfs/testing_jest_or_mocha/dzrk3vk/][Testing: Jest or Mocha?]] /r/vuejs :js:
:PROPERTIES:
:ID:       srddtcmrvjscmmntsmyjfststmchdzrkvktstngjstrmchrvjs
:END:
: Jest is amazing! It is out of the box , takes way less time to run the tests than mocha. A small side note: If you're using a vue js app, you are going to want to take a look at [Vue Test Utils](https://vue-test-utils.vuejs.org/). Makes life so much easier. Also sinon.js for spies and fakes. PM me if you need tips and tricks to start with automated testing. 
* [#C] [2019-07-07] How to Fix JavaScript Callbacks Variable Scope Problems | Pluralsight | Pluralsight
:PROPERTIES:
:ID:       hwtfxjvscrptcllbcksvrblscpprblmsplrlsghtplrlsght
:END:
https://www.pluralsight.com/guides/javascript-callbacks-variable-scope-problem
: ECMAScript 6 introduces the let keyword which allows you to declare a variable scoped to the nearest enclosing block and not global like var does. Thus the closure problem can be solved simply by replacing var with let:
* [2021-01-07] [[https://github.com/vasturiano/react-force-graph][vasturiano/react-force-graph: React component for 2D, 3D, VR and AR force directed graphs]] :viz:js:
:PROPERTIES:
:ID:       sgthbcmvstrnrctfrcgrphvstnntfrddvrndrfrcdrctdgrphs
:END:

* [#C] [2020-11-11] [[https://sitr.us/2015/05/31/advanced-features-in-flow.html][Advanced features in Flow | sitr.us]]
:PROPERTIES:
:ID:       sstrsdvncdftrsnflwhtmldvncdftrsnflwstrs
:END:

* TODO [#C] Js flow example with tweets l, then could post on JavaScript subreddit? :js:toblog:errors:
:PROPERTIES:
:CREATED:  [2019-10-31]
:ID:       jsflwxmplwthtwtslthncldpstnjvscrptsbrddt
:END:

* TODO [#D] [2019-12-22] BigInt Eilish üåü on Twitter: "@sveltejs Rewrote my Twitter search from React to Svelte @Reactjs 42kb Code: https://t.co/4fDXi7hqwG Site: https://t.co/Ync9baSs2n @Sveltejs 5kb Code: https://t.co/lD1gywleNp Site: https://t.co/pgmavoPLBy Had trouble w/ eslint/prettier, but overall much less code to write cc @wgao19 https://t.co/BthQ2I6C77" / Twitter
:PROPERTIES:
:ID:       bgntlshntwttrsvltjsrwrtmysscdtwrtccwgstcbthqctwttr
:END:
https://twitter.com/swyx/status/1208461215069945856
: Rewrote my Twitter search from React to Svelte
: @Reactjs  42kb
: Code: https://github.com/sw-yx/bettertwitter/tree/reactapp
: Site: https://inspiring-fermat.netlify.com
: 
: @Sveltejs 5kb
: Code: https://github.com/sw-yx/bettertwitter/tree/master
: Site: https://bettertwitter.netlify.com
: Had trouble w/ eslint/prettier, but overall much less code to write

* [#C] [2020-06-04] [[https://news.ycombinator.com/item?id=23420091][Show HN: Grid.js ‚Äì Advanced table library that works everywhere]]
:PROPERTIES:
:ID:       snwsycmbntrcmtmdshwhngrdjvncdtbllbrrythtwrksvrywhr
:END:
https://gridjs.io/?hn
* [#C] [2020-07-21] [[https://news.ycombinator.com/item?id=23909894][Show HN: Datagridxl.js ‚Äì No-nonsense fast Excel-like data table library]]
:PROPERTIES:
:ID:       snwsycmbntrcmtmdshwhndtgrsnnnsnsfstxcllkdttbllbrry
:END:
https://datagridxl.com

* [#C] [2021-03-13] [[https://vanillalist.top/][Vanilla List ‚Ä¢ The Vanilla JavaScript Repository]] :javascript:
:PROPERTIES:
:ID:       svnlllsttpvnlllstthvnlljvscrptrpstry
:END:
* [#C] [2021-04-30] [[https://markodenic.com/use-console-log-like-a-pro/][Use console.log() like a pro - Marko Denic - Web Developer]] :drill:javascript:
:PROPERTIES:
:ID:       f427b822-33c1-4780-9f62-322b847aecd2
:END:
- console.group() and console.groupEnd()
: Creates a new inline group, indenting all following output by another level. To move back out a level, call groupEnd().


- console.time() and console.timeEnd()
: 
:     console.time() ‚Äì Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.
:     console.timeEnd() ‚Äì Stops the specified timer and logs the elapsed time in seconds since it started.
