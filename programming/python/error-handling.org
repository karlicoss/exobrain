#+title: Error handling
#+filetags: errors

* examples of temporary timeouts                                    :network:
:PROPERTIES:
:CREATED:  [2018-05-18]
:ID:       xmplsftmprrytmts
:END:

: requests.exceptions.ReadTimeout:
: requests.exceptions.ConnectionError:
: socket.timeout: _ssl.c:817: The handshake operation timed out
:   File "/usr/lib/python3.6/socket.py", line 586, in readinto
:     return self._sock.recv_into(b)
: ConnectionResetError: [Errno 104] Connection reset by peer


** STRT backoff library, using it somewhere already
:PROPERTIES:
:ID:       bckfflbrrysngtsmwhrlrdy
:END:

using it in vkdump
backoff_network_errors in kython
I guess we could backoff indefinitely; and rely on global timeout if necessary
*** DONE check if kron has global timeout
:PROPERTIES:
:ID:       chckfkrnhsglbltmt
:END:



* network errors should be non-fatal, since they generally CAN be gracefully handled
:PROPERTIES:
:CREATED:  [2018-04-09]
:ID:       ntwrkrrrsshldbnnftlsncthygnrllycnbgrcfllyhndld
:END:
** TODO [2019-10-19] add to post?                                    :toblog:
:PROPERTIES:
:ID:       ddtpst
:END:
* [#A] [2018-04-03] Joe Duffy: the error model http://joeduffyblog.com/2016/02/07/the-error-model/ :errors:
:PROPERTIES:
:ID:       jdffythrrrmdljdffyblgcmthrrrmdl
:END:
* [#C] [2019-11-22] Error Handling Survey                       :rust:errors:
:PROPERTIES:
:ID:       rrrhndlngsrvy
:END:
https://blog.yoshuawuyts.com/error-handling-survey

* [2018-04-05] catching and rethrowing might be a good way of adding context :errors:
:PROPERTIES:
:ID:       ctchngndrthrwngmghtbgdwyfddngcntxt
:END:
* TODO [#B] [2020-11-30] [[https://www.fpcomplete.com/blog/error-handling-is-hard/][Error handling is hard]]
:PROPERTIES:
:ID:       swwwfpcmpltcmblgrrrhndlngshrdrrrhndlngshrd
:END:
: Like so many other things, error handling ultimately is a trade-off. When we're writing our initial code, we don't want to think about errors. We code to the happy path. How productive would you be if you had to derail every line of code with thought processes around the myriad ways your code could fail?
: 
: But then we're debugging a production issue, and we definitely want to think about errors. We curse our lazy selves for not handling an error case that obviously could have arisen. "Why did I decide to abort the process when the TCP connection failed? I should have retried! I should have logged the address I tried to connect to!"
* TODO [#B] Post mypy err handling on GitHub as a separate thing     :toblog:
:PROPERTIES:
:CREATED:  [2020-02-06]
:ID:       pstmypyrrhndlngngthbssprtthng
:END:


* TODO hmm, so setting __cause__ doesn't really work with multiprocessing, it's lost :python:errors:
:PROPERTIES:
:CREATED:  [2021-01-28]
:ID:       hmmssttngcsdsntrllywrkwthmltprcssngtslst
:END:
ugh. I guess the way to go is appending args


* STRT [#C] could probably even post to /r/programming               :toblog:
:PROPERTIES:
:CREATED:  [2019-10-23]
:ID:       cldprbblyvnpsttrprgrmmng
:END:
** [2019-10-31] demonstrate for JS flow? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield
:PROPERTIES:
:ID:       dmnstrtfrjsflwsdvlprmzllrdcswbjvscrptrfrncprtrsyld
:END:
** [2020-01-18] eh, someone already posted?..
:PROPERTIES:
:ID:       hsmnlrdypstd
:END:
